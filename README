MEMBERS OF THE GROUP:

Member1:
- Name: Prikka-Pekka Launonen
- E-mail: plaunone@student.oulu.fi
- Student#: 2471349

Member2:
- Name: Oskari Kotajärvi
- E-mail: oskari.kotajarvi@gmail.com
- Student#: 2462701

BUILD:

First clone the repo (git clone...)
After this open the repo folder in android studio. Android studio recognizes the git repo as a android studio project.
After this press the "run" button in android studio (green play symbol) and configure your emulator device if you havent already done so.
(Project has been tested with a nexus 5X with oreo 26 and with android devices running on Android versions 6, 7 and 9).
After this the app should open automatically in the emulator, but if it doesn't, the app can be found in the applications menu.

USAGE:
In the first place, you need to connect to the server. Swipe right and press "server on/off" button. Connection should be established with the default frequency. If this is not the case, you can change the frequency and server address in the settings. Default values should be www.opimobi.com:20000 and -1. As a confirmation of the established connection, you receive the current frequency number as a pop-up text. You can also change the frequency by yourself in the text field below the "server on/off" button. Then you can start the actual morse communication. Swipe back to left and press the HAL 9000 button to activate it. HAL 9000 stays in "on" position as long as you keep the image pressed.
In the upper right corner you can press the three dots to open a menu where you can go to the application settings. In "general" you can configure your server address (for example
"hölökynkölökyn.vappu.fi:1234567") and the frequency on which the application works on (for example 1337).

EXERCISE WORK PROGRESS:

From the very beginning, it was decided that Pirkka-Pekka could do most of the exercise work from doings 1 to doings 4. Oskari was busy during this time because of the project course and its assignment. Oskari joined back to the group and work progress after doings 4 and we decided to continue the exercise work with the form of pair programming. 

TESTING:

At least two clients using the same server and frequency.

One on phone, one on emulator:
- Working properly, tested with different android versions. 

Two phones:
- Working properly, tested with different android versions. 

Many phones:
- Tested in environment, where two phones and emulator were used. Working properly, three different android versions were used in this test (Android 6, 7, 8). 


Testing with different combinations of signalling.

Line up/down states overlapping on several clients:
- Working almost properly. The morse and audio is coming through, but the HAL 9000 light goes down in the client who decides to continue sending after the first one stops the transmission. Tested with two phones and emulator.


Testing exceptional situations.

Server not available when attempting to connect:
- Tested with no connection at all and with a wrong server address. Connection to the server couldn't be established, but this situation is not informed to the user too well. However, the software itself can handle this situation.

Connection gets broken:
- Same as above. 

Very quick taps, very long taps, rapidly repeating taps, etc:
- Very quick/rapidly repeating taps crashed the application with 3 different devices (2 phones, 1 emulator). This doesn't seem to be the case with 2 phones (prove me wrong). Long taps doesn't seem to crash the application. 

+ Too long frequency crashes the application. 








